================================================================================
1.
    public static <E> void insertAfter(Listnode<E> chain, int n, E d) {
        if (n < 1) throw new IndexOutOfBoundsException();

        // Iterate over the chain, counting the number of nodes we've seen
        for (int i = 1; chain != null; chain = chain.getNext(), i++) {
            // If we've seen the correct number of nodes, insert the new one
            if (i == n) {
                Listnode<E> newNode = new Listnode<E>(d, chain.getNext());
                chain.setNext(newNode);
                return;
            }
        }

        // If we got here, we must have come to the end of the chain without
        // inserting the new node, so n is larger than the size of the chain
        throw new IndexOutOfBoundsException();
    }
  

================================================================================
2.
    public static <E> void removeAll(Listnode<E> chain, E d) {
        // Skip the header node, since we know it doesn't contain d,
        // it is the initial "previous" node
        Listnode<E> prev = chain;

        // Set the current node to the next node after the head of the chain
        Listnode<E> curr = chain.getNext();
        // Iterate over the chain
        while (curr != null) {
            if (curr.getData().equals(d)) {
                // If the current node's data is equal to d, unlink it
                prev.setNext(curr.getNext());
            } else {
                // Otherwise, update the previous node to the current node
                prev = prev.getNext();
            }

            // Advance the current node
            curr = curr.getNext();
        }
    } 

