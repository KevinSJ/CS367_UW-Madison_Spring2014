================================================================================
1.
    a. Algorithm 1: O(N^2)
       Algorithm 2: O(N)
       Algorithm 3: O(N log_2 N)
        
    b. Algorithm 2

    c. No; many considerations go into choosing the most appropriate algorithm.
       For example, memory usage and development time are not captured by Big-O
       notation, but can be just as if not more important than running time.
       Furthermore, Big-O notation hides large constants. In this example,
       Algorithm 2 has a very large coefficient in front of the linear term; if
       we know that our problem instances will be small, we might prefer
       Algorithm 1 or 3.


================================================================================
2.
    public E get(int pos) {
        // Check that the position is valid
        if (pos < 0 || pos >= numItems) {
            throw new IndexOutOfBoundsException();
        }
        
        DblListnode<E> curr = items;
        // If the target is in the first half of the list, search forwards
        // Note the use of "<="! Since items is a reference to a node in the
        // first half, when numItems/2 is odd this visits one fewer node than
        // using strict inequality. If numItems is even, the distance is
        // equivalent.
        if (pos <= numItems/2) {
            for (int i = 0; i < pos; i++) {
                curr = curr.getNext();
            }
        }
        // Otherwise, search backwards
        else {
            for (int i = numItems; i > pos; i--) {
                curr = curr.getPrev();
            }
        }
        
        return curr.getData();
    }
    

================================================================================
3.
    a. (N-1)/2 if N is odd, N/2 if N is even

    b. O(N)

    c. N-1

    d. O(N)

    e. The doubly linked list uses more memory per node but allows faster access
       to nodes far from the beginning of the list. If memory efficiency is very
       important or if we know that we will only ever access nodes at the
       beginning of the list, we may prefer to use a singly linked list. 

