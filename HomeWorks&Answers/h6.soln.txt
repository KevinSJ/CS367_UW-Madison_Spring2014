================================================================================
1.
    a. The run-time is limited by both the number of nodes in the chain and by
       the parameter n, each of which is decreased by one in each recursive
       call. So the problem size is the minimum of those two values.

    b. T(0) = 1 
       T(N) = 1 + T(N-1)

    c. N | T(N)
       --------
       0 | 1
       1 | 2
       2 | 3
       3 | 4

       Guess: T(N) = N + 1

    d. T(N) = 1 + T(N-1)
            = 1 + (N-1 + 1)
            = N + 1

    e. O(N)

================================================================================
2.
    a. 3
         2
       3
           1
       3
         2
       3

    b. h

    c. T(1) = 1
       T(N) = N + 2T(N-1)

    d. 2^(N+1) - N - 2
      
    e. 6

================================================================================
3.
    a. If the first node is null, return null.
       Otherwise, if the first node's data matches, return the remainder of the
       chain with all matching nodes unlinked.
       Otherwise, return the first node with all matching nodes removed from the
       remainder of the chain.

    b.
        public static <E> Listnode<E> removeAllRec(Listnode<E> chain, E d) {
            if (chain == null) {
                return null;
            } else if (chain.getData().equals(d)) {
                return removeAllRec(chain.getNext(), d);
            } else {
                chain.setNext(removeAllRec(chain.getNext(), d));
                return chain;
            }
        }
     

